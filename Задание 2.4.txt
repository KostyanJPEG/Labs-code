d = {}  # Словарь с физ. адресами и их значениями
l = []  # Список логических  адресов, которые надо преобразовать в физические

# Парсинг файла
with open('dataset_44327_15.txt','r') as f:  # Открытие в режиме чтения скачанного файла со Stepik
    m,q,r = list(map(int, f.readline().split()))  # Считываем первую строку c переменными m,q,r
    for i in range(m):  # Считываем m пар (физическй адрес, значение), сохраняем в словарь d
        s = f.readline()
        s = s.split()
        s[0] = int(s[0])
        s[1] = int(s[1])
        d[s[0]] = s[1]
    for i in range(q):  # Считываем q запросов с логическими адресами и сохраняем в список l
        s = f.readline()
        l.append(int(s))

# Далее откроем файл, в который будем записывать результаты
with open('output.txt','w') as f: # Все результаты записываются в файл output.txt
    for i in range(q): #Обработка каждого запроса в цикле
        la = l[i]
# Разбиваем логический адрес на 5 участков (4 уровня + offset)
        pml4 = (la // 2**39) % 2**9
        dir_ptr = (la // 2**30) % 2**9
        directory = (la // 2**21) % 2**9
        table = (la // 2**12) % 2**9
        offset = la % 2**12

        val = r + 8*pml4  # Вычисляем индекс в таблице pml4 с учетом адресной арифметики
        # Теперь находим физический адрес таблицы directory_ptr
        if val in d.keys():  # Если адреса нет в нашем словаре, то значение = 0
            val = d[val]
        else:
            val = 0
        if val % 2 == 0:  # Если бит присутствия P равен 0 пишем fault и переходим к след. адресу
            f.write('fault\n')
            continue
        val = val % 2**51  # обнуляем бит с 51 по 63 (т.к. старшие 12 бит не участвуют в отображении)
        val = (val // 2**12)*2**12  # обнуляем первые 12 бит ("выравниваем" на границу 12 бит)
        val = val + 8*dir_ptr  # Вычисляем индекс в таблице directory_ptr с учетом адресной арифметики
        # Теперь находим физический адрес таблицы directory
        if val in d.keys():
            val = d[val]
        else:
            val = 0
        if val % 2 == 0:  # Если бит присутствия P равен 0 пишем fault
            f.write('fault\n')
            continue
        val = val % 2**51  # обнуляем бит с 51 по 63
        val = (val // 2**12)*2**12  # обнуляем первые 12 бит
        val = val + 8*directory  # Вычисляем индекс в таблице directory с учетом адресной арифметики
        # Теперь находим физический адрес таблицы table
        if val in d.keys():
            val = d[val]
        else:
            val = 0
        if val % 2 == 0:  # Если бит присутствия P равен 0 пишем fault
            f.write('fault\n')
            continue
        val = val % 2**51  # обнуляем бит с 51 по 63
        val = (val // 2**12)*2**12  # обнуляем первые 12 бит
        val = val + 8*table  # Вычисляем индекс в таблице table с учетом адресной арифметики
        # Теперь находим физический адрес таблицы physical page
        if val in d.keys():
            val = d[val]
        else:
            val = 0
        if val % 2 == 0:  # Если бит присутствия P равен 0 пишем fault
            f.write('fault\n')
            continue
        val = val % 2**51  # обнуляем бит с 51 по 63
        val = (val // 2**12)*2**12  # обнуляем первые 12 бит
        val = val + offset # Прибавляем к физ. адресу Physical page наш offset, получаем окончательный ответ
        f.write(str(val)+'\n') # Записываем его в файл